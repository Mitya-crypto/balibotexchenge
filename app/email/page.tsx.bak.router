'use client';
import { useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import {
  validateEmailFormat, suggestDomainFor, isDisposableDomain,
  startVerification, verifyCode, getEmail, splitEmail
} from '../../lib/email-util';

export default function EmailPage(){
  const router = useRouter();
  const [{email, sent, demoCode, error, info, code}, set] = useState({
    email:'', sent:false, demoCode:'', error:'', info:'', code:''
  });

  useEffect(()=>{
    const { email: current } = getEmail();
    if(current){ 
      // —É–∂–µ –µ—Å—Ç—å e-mail ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      set(s=>({...s, email: current!}));
    }
  },[]);

  const suggestion = useMemo(()=> email ? suggestDomainFor(email) : null, [email]);
  const disposable = useMemo(()=> {
    const {domain} = splitEmail(email||'');
    return domain ? isDisposableDomain(domain) : false;
  }, [email]);

  const onSend = ()=>{
    const e = email.trim();
    if(!validateEmailFormat(e)){
      set(s=>({...s, error:'–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π e-mail', info:''}));
      return;
    }
    const {code} = startVerification(e, 600);
    set(s=>({...s, sent:true, demoCode:code, error:'', info:'–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–¥–µ–º–æ). –í–≤–µ–¥–∏—Ç–µ 6 —Ü–∏—Ñ—Ä –Ω–∏–∂–µ.'}));
  };

  const onVerify = ()=>{
    const res = verifyCode(code);
    if(!res.ok){
      const map: Record<string,string> = {
        'expired':'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑.',
        'mismatch':'–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        'no-session':'–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∑–∞–Ω–æ–≤–æ.'
      };
      set(s=>({...s, error: map[res.reason||'mismatch'] || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–æ–¥'}));
      return;
    }
    // success ‚Üí –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    router.push('/profile');
  };

  const onResend = ()=> onSend();

  return (
    <div className="vstack" style={{gap:16}}>
      <div className="topbar"><Link href="/profile">‚Üê –ü—Ä–æ—Ñ–∏–ª—å</Link></div>

      <div className="card vstack" style={{gap:12}}>
        <label htmlFor="email"><b>E-mail</b></label>
        <input
          id="email" type="email" placeholder="you@example.com" value={email}
          onChange={e=>set(s=>({...s, email:e.target.value, error:'', info:''}))}
          style={{padding:'12px', border:'1px solid var(--border)', borderRadius:'12px',
                  background:'var(--card)', color:'var(--text)'}}
        />

        {suggestion && (
          <div className="li" style={{marginTop:4}}>
            <div className="left">
              <div className="li circle">üí°</div>
              <div>
                <b>–ü–æ—Ö–æ–∂–µ, –æ–ø–µ—á–∞—Ç–∫–∞</b>
                <div className="muted" style={{fontSize:12}}>–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É <code>{email.split('@')[0]}@{suggestion}</code></div>
              </div>
            </div>
            <button className="btn" onClick={()=>{
              const local = email.split('@')[0] || '';
              set(s=>({...s, email: `${local}@${suggestion}`}));
            }}>–ò—Å–ø—Ä–∞–≤–∏—Ç—å</button>
          </div>
        )}

        {disposable && (
          <div className="li" style={{marginTop:4, borderColor:'var(--warning)'}}>
            <div className="left">
              <div className="li circle">‚ö†Ô∏è</div>
              <div>
                <b>–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω</b>
                <div className="muted" style={{fontSize:12}}>–¢–∞–∫–∏–µ –∞–¥—Ä–µ—Å–∞ —á–∞—Å—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.</div>
              </div>
            </div>
          </div>
        )}

        {!sent ? (
          <button className="btn primary" onClick={onSend}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥</button>
        ) : (
          <div className="vstack" style={{gap:8}}>
            <label htmlFor="code"><b>–ö–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞</b></label>
            <input
              id="code" inputMode="numeric" pattern="[0-9]*" maxLength={6} placeholder="6 —Ü–∏—Ñ—Ä"
              value={code} onChange={e=>set(s=>({...s, code:e.target.value.replace(/\D/g,'')}))}
              style={{padding:'12px', border:'1px solid var(--border)', borderRadius:'12px',
                      letterSpacing:'6px', textAlign:'center', fontSize:18}}
            />
            <div className="hstack" style={{justifyContent:'space-between'}}>
              <button className="btn" onClick={onResend}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑</button>
              <button className="btn primary" onClick={onVerify}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å</button>
            </div>
            <div className="muted" style={{fontSize:12}}>
              –î–ª—è –¥–µ–º–æ: –∫–æ–¥ <b>{demoCode}</b> (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–Ω –ø—Ä–∏–¥—ë—Ç –ø–∏—Å—å–º–æ–º).
            </div>
          </div>
        )}

        {error && <div className="muted" style={{color:'var(--danger)'}}>{error}</div>}
        {info && !error && <div className="muted">{info}</div>}
      </div>

      <div className="card muted" style={{fontSize:12}}>
        –ë–µ–∑ –±—ç–∫–µ–Ω–¥–∞ e-mail –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä/SMTP.
      </div>
    </div>
  );
}
